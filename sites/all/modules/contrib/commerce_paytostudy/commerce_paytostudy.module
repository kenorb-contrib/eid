<?php

/**
 * @file
 * Provides a PaytoStudy payment method for Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paytostudy_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_paytostudy'] = array(
    'title' => t('Pay to Study payment method'),
    'display_title' => t('Pay to Study'),
    'description' => t('Provides a Pay to Study payment method for Drupal Commerce.'),
    'active' => FALSE,
    'file' => 'commerce_paytostudy.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_paytostudy_form_commerce_checkout_form_alter(&$form, &$form_state) {

  // If this checkout form contains the payment method radios.
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for the Commerce Pay to Study option.
    foreach (array_keys($form['commerce_payment']['payment_method']['#options']) as $key) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find Commerce Pay to Study, include its CSS on the form and exit the loop.
      if ($method_id == 'commerce_paytostudy') {
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_paytostudy') . '/css/commerce_paytostudy.css';
        break;
      }
    }
  }
}

/**
 * Send the request to PaytoStudy.
 *
 * @param $url
 *   URL to send the request to.
 * @param $data
 *   post request message to send.
 * @return
 *   Parsed response object.
 */
function _commerce_paytostudy_send_request($url, $data) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);
  curl_setopt($ch, CURLOPT_USERAGENT, 'Pay to Study - post Service');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // this line makes it work under https
  $response = curl_exec($ch);
  curl_close($ch);

  // Tidy it up.
  $response = preg_replace('/\s+/', ' ', $response);
  $response = preg_replace("/[\n\r]/", '', $response);

  // Parse the XML response.
  $response_obj = new PayToStudy($response);
  $result = $response_obj->record;

  return $result;
}

/**
 * Parse the response XML and create and object.
 */
class PayToStudy {

  // Initialise variables.
  var $parser;
  var $parentElements = array();
  var $currentElement = 0;
  var $currentTSSCheck = "";
  var $record = array();

  function PayToStudy($response) {
    // Create and initialise parser
    $this->parser = xml_parser_create();
    xml_set_object($this->parser, $this);
    xml_set_element_handler($this->parser, 'startElement', 'endElement');
    xml_set_character_data_handler($this->parser, 'cDataHandler');

    xml_parse($this->parser, $response);
    xml_parser_free($this->parser);
  }

  function startElement($parser, $name, $attrs) {
    $name = strtolower($name);
    array_push($this->parentElements, $name);
    $this->currentElement = join("_", $this->parentElements);

    // Clean element names to remove the root_ prefix.
    $this->currentElement = str_replace('root_', '', $this->currentElement);
  }

  function cDataHandler($parser, $cdata) {
    if ( trim ( $cdata ) ) {
      if ($this->currentTSSCheck != 0) {
        $this->record['tsschecks']["$this->currentTSSCheck"] = $cdata;
      }

      $this->record[$this->currentElement] = $cdata;
    }
  }

  function endElement($parser, $name) {
    $this->currentTSSCheck = 0;
    array_pop($this->parentElements);
  }
}
